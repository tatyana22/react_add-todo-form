{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","id","title","completed","classNames","TodoList","todos","map","username","getUserById","userId","usersFromServer","find","todoWithUser","getTodoId","Math","max","App","useState","setTodos","todoTitle","setTodoTitle","hasTitleError","setHasTitleError","hasUserIdError","setHasUserIdError","todoUserId","setTodoUserId","action","method","onSubmit","event","preventDefault","trimTitle","trim","newTodo","currentTodos","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"4OAOaA,EAA4B,SAAC,GAAD,QACvCC,KACEC,EAFqC,EAErCA,KACAC,EAHqC,EAGrCA,MAHqC,OAMvC,mBAAGC,UAAU,WAAWC,KAAI,kBAAaF,GAAzC,SACGD,KCLQI,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCC,EACED,EADFC,GAAIC,EACFF,EADEE,MAAOR,EACTM,EADSN,KAAMS,EACfH,EADeG,UAGnB,OACE,0BACE,UAASF,EACTJ,UAAWO,IACT,WACA,CACE,sBAAuBD,IAL7B,UASE,oBAAIN,UAAU,kBAAd,SAAiCK,IAEhCR,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QClBlBW,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACvC,yBAAST,UAAU,WAAnB,SACGS,EAAMC,KAAI,SAAAP,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKC,UCXvB,GACb,CACEA,GAAI,EACJN,KAAM,gBACNa,SAAU,OACVZ,MAAO,qBAET,CACEK,GAAI,EACJN,KAAM,eACNa,SAAU,YACVZ,MAAO,qBAET,CACEK,GAAI,EACJN,KAAM,mBACNa,SAAU,WACVZ,MAAO,sBAET,CACEK,GAAI,EACJN,KAAM,mBACNa,SAAU,WACVZ,MAAO,6BAET,CACEK,GAAI,EACJN,KAAM,mBACNa,SAAU,SACVZ,MAAO,4BAET,CACEK,GAAI,EACJN,KAAM,uBACNa,SAAU,mBACVZ,MAAO,2BAET,CACEK,GAAI,EACJN,KAAM,kBACNa,SAAU,eACVZ,MAAO,0BAET,CACEK,GAAI,EACJN,KAAM,2BACNa,SAAU,gBACVZ,MAAO,wBAET,CACEK,GAAI,EACJN,KAAM,kBACNa,SAAU,WACVZ,MAAO,2BAET,CACEK,GAAI,GACJN,KAAM,qBACNa,SAAU,iBACVZ,MAAO,2BCpDLa,EAAc,SAACC,GAGnB,OAFkBC,EAAgBC,MAAK,SAAAlB,GAAI,OAAIA,EAAKO,KAAOS,MAEvC,MAGhBG,ECbS,CACb,CACEZ,GAAI,EACJC,MAAO,qBACPC,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,GACJC,MAAO,kBACPC,WAAW,EACXO,OAAQ,GAEV,CACET,GAAI,EACJC,MAAO,qCACPC,WAAW,EACXO,OAAQ,IDJyCH,KAAI,SAAAP,GAAI,kCACxDA,GADwD,IAE3DN,KAAMe,EAAYT,EAAKU,aAGnBI,EAAY,SAACR,GAGjB,OAFWS,KAAKC,IAAL,MAAAD,KAAI,YAAQT,EAAMC,KAAI,SAAAP,GAAI,OAAIA,EAAKC,QAElC,GAGDgB,EAAgB,WAC3B,MAA0BC,mBAAyBL,GAAnD,mBAAOP,EAAP,KAAca,EAAd,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0CH,oBAAS,GAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KACA,EAA4CL,oBAAS,GAArD,mBAAOM,EAAP,KAAuBC,EAAvB,KACA,EAAoCP,mBAAS,GAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KA2CA,OACE,sBAAK9B,UAAU,MAAf,UACE,+CAEA,uBACE+B,OAAO,aACPC,OAAO,OACPC,SA3CkB,SAACC,GACvBA,EAAMC,iBAEN,IAAMC,EAAYb,EAAUc,OAK5B,GAHAX,GAAkBU,GAClBR,GAAmBC,GAEdO,GAAcP,EAAnB,CAIA,IAAMS,EAAwB,CAC5BlC,GAAIa,EAAUR,GACdJ,MAAOkB,EACPjB,WAAW,EACXO,OAAQgB,EACRhC,KAAMe,EAAYiB,IAGfJ,GAAkBA,IACrBH,GAAS,SAAAiB,GAAY,4BAAQA,GAAR,CAAsBD,OAzB7Cd,EAAa,IACbM,EAAc,MA2CZ,UAKE,sBAAK9B,UAAU,QAAf,UACE,uBACEwC,KAAK,OACL,UAAQ,aACRC,YAAY,gBACZC,MAAOnB,EACPoB,SAzBU,SAACT,GACnBV,EAAaU,EAAMU,OAAOF,OAC1BhB,GAAiB,MAyBVD,GACC,sBAAMzB,UAAU,QAAhB,qCAMJ,sBAAKA,UAAU,QAAf,UACE,yBACE,UAAQ,aACR0C,MAAOb,EACPc,SAjCW,SAACT,GACpBJ,GAAeI,EAAMU,OAAOF,OAC5BhB,GAAiB,IA4BX,UAKE,wBAAQgB,MAAM,IAAIG,UAAQ,EAA1B,2BAEC/B,EAAgBJ,KAAI,SAAAb,GAAI,OACvB,wBAAQ6C,MAAO7C,EAAKO,GAApB,SACGP,EAAKC,MADqBD,EAAKO,UAKrCuB,GACC,sBAAM3B,UAAU,QAAhB,qCAKJ,wBAAQwC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAU/B,MAAOA,QEtHvBqC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.eee7b1d2.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../react-app-env';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({\n  user: {\n    name,\n    email,\n  },\n}) => (\n  <a className=\"UserInfo\" href={`mailto: ${email}`}>\n    {name}\n  </a>\n);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { TodoWithUser } from '../../react-app-env';\n\ntype Props = {\n  todo: TodoWithUser;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id, title, user, completed,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoWithUser } from '../../react-app-env';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: TodoWithUser[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoWithUser } from './react-app-env';\n\nconst getUserById = (userId: number) => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nconst todoWithUser: TodoWithUser[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst getTodoId = (todos: TodoWithUser[]) => {\n  const id = Math.max(...todos.map(todo => todo.id));\n\n  return id + 1;\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<TodoWithUser[]>(todoWithUser);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasUserIdError, setHasUserIdError] = useState(false);\n  const [todoUserId, setTodoUserId] = useState(0);\n\n  const resetForm = () => {\n    setTodoTitle('');\n    setTodoUserId(0);\n  };\n\n  const handlFromSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const trimTitle = todoTitle.trim();\n\n    setHasTitleError(!trimTitle);\n    setHasUserIdError(!todoUserId);\n\n    if (!trimTitle || !todoUserId) {\n      return;\n    }\n\n    const newTodo: TodoWithUser = {\n      id: getTodoId(todos),\n      title: todoTitle,\n      completed: false,\n      userId: todoUserId,\n      user: getUserById(todoUserId),\n    };\n\n    if (!hasTitleError && !hasTitleError) {\n      setTodos(currentTodos => [...currentTodos, newTodo]);\n      resetForm();\n    }\n  };\n\n  const handleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTodoTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setTodoUserId(+event.target.value);\n    setHasTitleError(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handlFromSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={todoTitle}\n            onChange={handleInput}\n          />\n          {hasTitleError && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={todoUserId}\n            onChange={handleSelect}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>\n                {user.name}\n              </option>\n            ))}\n          </select>\n          {hasUserIdError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}